#!/usr/bin/env python3

from __future__ import print_function
from six.moves import input
import cv2
import sys
import copy
import rospy
import moveit_commander
import moveit_msgs.msg
import geometry_msgs.msg
from sensor_msgs.msg import Image
from cv_bridge import CvBridge
import math
try:
    from math import pi, tau, dist, fabs, cos
except:  # For Python 2 compatibility
    from math import pi, fabs, cos, sqrt

    tau = 2.0 * pi

    def dist(p, q):
        return sqrt(sum((p_i - q_i) ** 2.0 for p_i, q_i in zip(p, q)))


from std_msgs.msg import String
from moveit_commander.conversions import pose_to_list
ARUCO_DICT = {
    "DICT_4X4_50": cv2.aruco.DICT_4X4_50,
    "DICT_4X4_100": cv2.aruco.DICT_4X4_100,
    "DICT_4X4_250": cv2.aruco.DICT_4X4_250,
    "DICT_4X4_1000": cv2.aruco.DICT_4X4_1000,
    "DICT_5X5_50": cv2.aruco.DICT_5X5_50,
    "DICT_5X5_100": cv2.aruco.DICT_5X5_100,
    "DICT_5X5_250": cv2.aruco.DICT_5X5_250,
    "DICT_5X5_1000": cv2.aruco.DICT_5X5_1000,
    "DICT_6X6_50": cv2.aruco.DICT_6X6_50,
    "DICT_6X6_100": cv2.aruco.DICT_6X6_100,
    "DICT_6X6_250": cv2.aruco.DICT_6X6_250,
    "DICT_6X6_1000": cv2.aruco.DICT_6X6_1000,
    "DICT_7X7_50": cv2.aruco.DICT_7X7_50,
    "DICT_7X7_100": cv2.aruco.DICT_7X7_100,
    "DICT_7X7_250": cv2.aruco.DICT_7X7_250,
    "DICT_7X7_1000": cv2.aruco.DICT_7X7_1000,
    "DICT_ARUCO_ORIGINAL": cv2.aruco.DICT_ARUCO_ORIGINAL,
    "DICT_APRILTAG_16h5": cv2.aruco.DICT_APRILTAG_16h5,
    "DICT_APRILTAG_25h9": cv2.aruco.DICT_APRILTAG_25h9,
    "DICT_APRILTAG_36h10": cv2.aruco.DICT_APRILTAG_36h10,
    "DICT_APRILTAG_36h11": cv2.aruco.DICT_APRILTAG_36h11
}

TARGET_MARKER_ID = 2 # Hedef ArUco işareti ID'si
def main_position():
	
	group_name = "manipulator"
	move_group = moveit_commander.MoveGroupCommander(group_name)

	
	joint_goal = move_group.get_current_joint_values()
	joint_goal[0] = 0
	joint_goal[1] = -2.09
	joint_goal[2] = 1.745
	joint_goal[3] = 0.349
	joint_goal[4] = 1.5707
	joint_goal[5] = -1.5707 

	move_group.go(joint_goal, wait=True)

	# Calling ``stop()`` ensures that there is no residual movement
	move_group.stop()

def twofour_position():
	
	group_name = "manipulator"
	move_group = moveit_commander.MoveGroupCommander(group_name)

	
	joint_goal = move_group.get_current_joint_values()
	joint_goal[0] = -0.33
	joint_goal[1] = -1.85
	joint_goal[2] = 1.605
	joint_goal[3] = 0.22
	joint_goal[4] = 1.64
	joint_goal[5] = -1.5707 

	move_group.go(joint_goal, wait=True)

	# Calling ``stop()`` ensures that there is no residual movement
	move_group.stop()


def image_callback(msg):
    bridge = CvBridge()
    img = bridge.imgmsg_to_cv2(msg, desired_encoding="bgr8")

    h, w, _ = img.shape
    width = 1000
    height = int(width * (h / w))
    img = cv2.resize(img, (width, height), interpolation=cv2.INTER_CUBIC)
    TARGET_CX = width // 2

    for aruco_name in ARUCO_DICT.keys():
        arucoDict = cv2.aruco.Dictionary_get(ARUCO_DICT[aruco_name])
        arucoParams = cv2.aruco.DetectorParameters_create()

        corners, ids, _ = cv2.aruco.detectMarkers(img, arucoDict, parameters=arucoParams)

        detected_markers = aruco_display(corners, ids, img)

    #cv2.imshow("Image", detected_markers)
    #cv2.waitKey(1)
def aruco_display(corners, ids, image):
    if len(corners) > 0:
        ids = ids.flatten()

        for (markerCorner, markerID) in zip(corners, ids):
            if markerID == TARGET_MARKER_ID:
                corners = markerCorner.reshape((4, 2))
                (topLeft, topRight, bottomRight, bottomLeft) = corners

                cX = int((topLeft[0] + bottomRight[0]) / 2.0)
                cY = int((topLeft[1] + bottomRight[1]) / 2.0)

                cv2.circle(image, (cX, cY), 4, (0, 0, 255), -1)

                cv2.putText(image, str(markerID), (int(topLeft[0]), int(topLeft[1] - 10)), cv2.FONT_HERSHEY_SIMPLEX,
                            0.5, (0, 255, 0), 2)
                print("[Inference] ArUco marker ID: {}".format(markerID))
                print("[Inference] ArUco marker center: ({}, {})".format(cX, cY))

                group_name = "manipulator"
                move_group = moveit_commander.MoveGroupCommander(group_name)
                joint_goal = move_group.get_current_joint_values()

                while abs(cX - 480) > 25:  # ArUco merkezi hedefe ulaşana kadar
                    if cX < 480:
                        joint_goal[0] += 0.005  # Eklemleri döndür
                    else:
                        joint_goal[0] -= 0.005

                    move_group.go(joint_goal, wait=True)
                    move_group.stop()

                    for (markerCorner, markerID) in zip(corners, ids):
                            if markerID == TARGET_MARKER_ID:
                                corners = markerCorner.reshape((4, 2))
                                (topLeft, topRight, bottomRight, bottomLeft) = corners

                                cX = int((topLeft[0] + bottomRight[0]) / 2.0)
                                cY = int((topLeft[1] + bottomRight[1]) / 2.0)

                                cv2.circle(image, (cX, cY), 4, (0, 0, 255), -1)

                                cv2.putText(image, str(markerID), (int(topLeft[0]), int(topLeft[1] - 10)), cv2.FONT_HERSHEY_SIMPLEX,
                                            0.5, (0, 255, 0), 2)

            if markerID != TARGET_MARKER_ID:
                break
    return image
    
def approach():
    group_name = "manipulator"
    move_group = moveit_commander.MoveGroupCommander(group_name)


    current_pose = move_group.get_current_pose().pose


    target_pose = geometry_msgs.msg.Pose()
    target_pose.position.x = current_pose.position.x-0.2
    target_pose.position.y = current_pose.position.y   
    target_pose.position.z = current_pose.position.z 
    target_pose.orientation = current_pose.orientation

    # Set the target pose
    move_group.set_pose_target(target_pose)

    # Plan and execute the motion
    success = move_group.go(wait=True)

    # Clear the pose target
    move_group.clear_pose_targets()
    move_group.stop()    
    current_pose = move_group.get_current_pose().pose
    jv=move_group.get_current_joint_values()
    jv_degree=[math.degrees(angle) for angle in jv]
    print(jv_degree)
            
def go_to_joint_state():
    group_name = "manipulator"
    move_group = moveit_commander.MoveGroupCommander(group_name)

    # Hedef eklemin adını belirle
    joint_name = "wrist_3_joint"  # Burada "joint_name" yerine kontrol etmek istediğiniz eklem adını yazın

    # Eklemin hedef konumunu belirle
    joint_goal = move_group.get_current_joint_values()
    joint_names = move_group.get_active_joints()
    joint_index = joint_names.index(joint_name)
    joint_goal[joint_index] += 1.5708  # Radyan cinsinden 90 derece döndürme

    move_group.go(joint_goal, wait=True)
    move_group.stop()

    current_joint_state = move_group.get_current_joint_values()

moveit_commander.roscpp_initialize(sys.argv)
rospy.init_node("move_group_python_interface_tutorial", anonymous=True)

robot = moveit_commander.RobotCommander()

scene = moveit_commander.PlanningSceneInterface()

group_name = "manipulator"
move_group = moveit_commander.MoveGroupCommander(group_name)

display_trajectory_publisher = rospy.Publisher(
    "/move_group/display_planned_path",
    moveit_msgs.msg.DisplayTrajectory,
    queue_size=20,
)

planning_frame = move_group.get_planning_frame()


eef_link = move_group.get_end_effector_link()


group_names = robot.get_group_names()


# Sometimes for debugging it is useful to print the entire state of the
# robot:

print(robot.get_current_state())

#image_sub = rospy.Subscriber("camera_image/image_raw", Image, image_callback)
#Function Area Start

main_position()
#twofour_position()
approach()

#Function Area End


rospy.spin()

cv2.destroyAllWindows()
